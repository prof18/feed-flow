name: Update Website after Desktop Release

on:
  workflow_dispatch: {}
  release:
    types: [released]

jobs:
  update-website:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5

      - name: Create path variables
        id: path_variables
        run: |
          MAJOR=$(grep "MAJOR=" version.properties | cut -d'=' -f2)
          MINOR=$(grep "MINOR=" version.properties | cut -d'=' -f2)
          PATCH=$(grep "PATCH=" version.properties | cut -d'=' -f2)
          echo "VERSION=$MAJOR.$MINOR.$PATCH" >> $GITHUB_ENV

      - name: Get latest release assets
        id: get_assets
        run: |
          # Get the latest release assets
          echo "Fetching latest release assets..."
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/prof18/feed-flow/releases/latest" | jq -r '.assets[] | {name: .name, url: .browser_download_url}')
          
          echo "Raw assets data:"
          echo "$ASSETS"
          
          # Extract URLs for each file type
          DMG_URL=$(echo "$ASSETS" | jq -r 'select(.name | endswith(".dmg")) | .url')
          MSI_URL=$(echo "$ASSETS" | jq -r 'select(.name | endswith(".msi")) | .url')
          RPM_URL=$(echo "$ASSETS" | jq -r 'select(.name | endswith(".rpm")) | .url')
          DEB_URL=$(echo "$ASSETS" | jq -r 'select(.name | endswith(".deb")) | .url')
          
          echo "Extracted URLs:"
          echo "DMG URL: $DMG_URL"
          echo "MSI URL: $MSI_URL"
          echo "RPM URL: $RPM_URL"
          echo "DEB URL: $DEB_URL"
          
          # Set outputs
          echo "DMG_URL=$DMG_URL" >> $GITHUB_ENV
          echo "MSI_URL=$MSI_URL" >> $GITHUB_ENV
          echo "RPM_URL=$RPM_URL" >> $GITHUB_ENV
          echo "DEB_URL=$DEB_URL" >> $GITHUB_ENV

      - name: Update website
        run: |          
          # Update downloads.yml only if URLs are not empty
          if [ ! -z "$DMG_URL" ]; then
            sed -i "s|url: \".*\.dmg\"|url: \"${DMG_URL}\"|" website/data/downloads.yml
          fi
          if [ ! -z "$MSI_URL" ]; then
            sed -i "s|url: \".*\.msi\"|url: \"${MSI_URL}\"|" website/data/downloads.yml
          fi
          if [ ! -z "$RPM_URL" ]; then
            sed -i "s|url: \".*\.rpm\"|url: \"${RPM_URL}\"|" website/data/downloads.yml
          fi
          if [ ! -z "$DEB_URL" ]; then
            sed -i "s|url: \".*\.deb\"|url: \"${DEB_URL}\"|" website/data/downloads.yml
          fi

      - name: Debug print of hero and downloads
        run: |
          echo "Hero:"
          cat website/data/hero.yml
          echo "Downloads:"
          cat website/data/downloads.yml

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.101.0'
          extended: true

      - name: Build
        run: |
          cd website
          HUGO_ENV=production hugo --gc --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: website/public
