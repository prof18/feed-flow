name: Manual Windows Build
on:
  workflow_dispatch:
    { }

jobs:
  windows-build:
    runs-on: windows-latest
    timeout-minutes: 40

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions "-PaboutLibraries.exportPath=src/main/resources/"

      - name: Create path variables
        id: path_variables
        shell: pwsh
        run: |
          $tag = $(git describe --tags --abbrev=0 --match "*-desktop")
          $version = $tag -replace '-desktop$', ''
          $name_msi = "FeedFlow-${version}.msi"
          $path_msi = "desktopApp/build/release/main-release/msi/${name_msi}"
          $name_exe = "FeedFlow-${version}.exe"
          $path_exe = "desktopApp/build/release/main-release/exe/${name_exe}"
          $name_msix = "FeedFlow-${version}.msix"
          $path_msix = "desktopApp/build/release/main-release/msix/${name_msix}"
          "TAG=$tag" >> $env:GITHUB_ENV
          "VERSION=$version" >> $env:GITHUB_ENV
          "RELEASE_PATH_MSI=$path_msi" >> $env:GITHUB_ENV
          "NAME_MSI=$name_msi" >> $env:GITHUB_ENV
          "RELEASE_PATH_EXE=$path_exe" >> $env:GITHUB_ENV
          "NAME_EXE=$name_exe" >> $env:GITHUB_ENV
          "RELEASE_PATH_MSIX=$path_msix" >> $env:GITHUB_ENV
          "NAME_MSIX=$name_msix" >> $env:GITHUB_ENV

      - name: Create Properties file
        shell: pwsh
        run: |
          "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          "sentry_dns=$env:SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          "version=$env:VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          "dropbox_key=$env:DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ env.VERSION }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create MSI
        run: ./gradlew packageReleaseMsi packageReleaseExe

      - name: Install MSIX Packaging Tool and Dependencies
        shell: pwsh
        run: |
          # Create directory for MSIX output
          New-Item -ItemType Directory -Force -Path "desktopApp/build/release/main-release/msix"
          
          # Download and install FOD (Feature on Demand) package for Windows 11
          Write-Host "Downloading MSIX Packaging Tool Driver FOD..."
          $fodUrl = "https://download.microsoft.com/download/6/c/7/6c7d654b-580b-40d4-8502-f8d435ca125a/Msix-PackagingTool-Driver-Package%7E31bf3856ad364e35%7Eamd64%7E%7E1.cab"
          $fodPath = "MSIXPackagingToolDriver.cab"
          Invoke-WebRequest -Uri $fodUrl -OutFile $fodPath
          
          Write-Host "Installing MSIX Packaging Tool Driver FOD..."
          $dismPath = "$env:SystemRoot\System32\dism.exe"
          & $dismPath /Online /Add-Package /PackagePath:$fodPath
          
          # Download MSIX Packaging Tool
          Write-Host "Downloading MSIX Packaging Tool..."
          $msixToolUrl = "https://download.microsoft.com/download/e/2/e/e2e923b2-7a3a-4730-969d-ab37001fbb5e/MSIXPackagingtoolv1.2024.405.0.msixbundle"
          $msixToolPath = "MSIXPackagingTool.msixbundle"
          Invoke-WebRequest -Uri $msixToolUrl -OutFile $msixToolPath
          
          Write-Host "Installing MSIX Packaging Tool..."
          & $dismPath /Online /Add-ProvisionedAppxPackage /PackagePath:$msixToolPath /SkipLicense
          
          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 10

      - name: Prepare MSIX conversion template
        shell: pwsh
        run: |
          # Convert paths to absolute Windows paths
          $workspaceRoot = $pwd.Path
          Write-Host "`nConverting paths to absolute Windows paths:"
          Write-Host "Workspace root: $workspaceRoot"
          
          $absoluteMsiPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSI
          $absoluteMsixPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSIX
          
          # Ensure paths use Windows format
          $absoluteMsiPath = $absoluteMsiPath.Replace('/', '\')
          $absoluteMsixPath = $absoluteMsixPath.Replace('/', '\')
          
          Write-Host "Absolute MSI path: $absoluteMsiPath"
          Write-Host "Absolute MSIX path: $absoluteMsixPath"
          
          # Read and store content
          $templateContent = Get-Content -Path ".github/msix-conversion-template.xml" -Raw
          
          # Do replacements with absolute paths
          $templateContent = $templateContent.Replace("[MSIPath]", $absoluteMsiPath)
          $templateContent = $templateContent.Replace("[MSIXOutputPath]", $absoluteMsixPath)
          $templateContent = $templateContent.Replace("[AppVersion]", "${{ env.VERSION }}.0")
          $templateContent = $templateContent.Replace("[PublisherName]", "${{ secrets.MSIX_PUBLISHER_DISPLAY_NAME }}")
          
          Write-Host "`nWriting template to msix-conversion-config.xml"
          $templateContent | Set-Content -Path "msix-conversion-config.xml" -NoNewline
          
      - name: Convert MSI to MSIX
        shell: pwsh
        run: |
          Write-Host "`nStarting MSIX conversion..."
          MsixPackagingTool.exe create-package --template "msix-conversion-config.xml" -v

      - name: Update MSIX Manifest
        shell: pwsh
        run: |
          Write-Host "`nUpdating MSIX manifest..."
          # Create a temporary directory for extraction
          $tempDir = "temp_msix_extract"
          New-Item -ItemType Directory -Force -Path $tempDir
          
          # Extract the MSIX package using makeappx
          Write-Host "`nUnpacking MSIX package..."
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/makeappx.exe' unpack /p $env:RELEASE_PATH_MSIX /d $tempDir
          
          # Read the manifest and print the content for debugging
          $manifestPath = Join-Path $tempDir "AppxManifest.xml"
          Write-Host "`nOriginal manifest contents:"
          Get-Content $manifestPath
          
          $manifestContent = Get-Content $manifestPath -Raw
          
          # Update TargetDeviceFamily version numbers
          $newTargetDeviceFamily = '<TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.22000.1" />'
          $pattern = '<TargetDeviceFamily Name="Windows.Desktop" MinVersion="[^"]*" MaxVersionTested="[^"]*" />'
          $manifestContent = [regex]::Replace($manifestContent, $pattern, $newTargetDeviceFamily)
          
          # Update Resources section
          $newResources = Get-Content -Path ".github/msix-resources-template.xml" -Raw
          $pattern = '<Resources>[ ]*<Resource Language="en-us" />[ ]*</Resources>'
          $manifestContent = [regex]::Replace($manifestContent, $pattern, $newResources)
          
          # Write the updated manifest and print the content for debugging
          $manifestContent | Set-Content $manifestPath -NoNewline
          
          Write-Host "`nUpdated manifest contents:"
          Get-Content $manifestPath
          
          # Create a new MSIX package with the updated manifest using makeappx
          Write-Host "`nRepackaging MSIX with updated manifest..."
          $tempMsixPath = Join-Path $tempDir "temp.msix"
          
          # Ensure we're in the correct directory for repackaging
          Push-Location $tempDir
          try {
            & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/makeappx.exe' pack /d . /p "temp.msix"
          }
          finally {
            Pop-Location
          }
          
          # Delete the original MSIX and move the new one
          Write-Host "`nReplacing original MSIX with updated package..."
          if (Test-Path $env:RELEASE_PATH_MSIX) {
            Remove-Item -Path $env:RELEASE_PATH_MSIX -Force
          }
          Move-Item -Path $tempMsixPath -Destination $env:RELEASE_PATH_MSIX -Force
          
          # Clean up
          Remove-Item -Path $tempDir -Recurse -Force
          
          Write-Host "`nManifest updated successfully"

      - name: Upload asset msi
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_MSI }}
          name: ${{ env.NAME_MSI }}

      - name: Upload asset exe
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_EXE }}
          name: ${{ env.NAME_EXE }}
          
      - name: Upload asset msix
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_MSIX }}
          name: ${{ env.NAME_MSIX }}

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*