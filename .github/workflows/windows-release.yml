name: Windows Release

on:
  workflow_call:
    secrets:
      GRADLE_CACHE_ENCRYPTION_KEY:
        required: true
      DROPBOX_API_KEY:
        required: true
      SENTRY_DNS:
        required: true
      MSIX_PUBLISHER_DISPLAY_NAME:
        required: true

jobs:
  deploy:
    runs-on: windows-latest
    timeout-minutes: 40
    outputs:
      release_path: ${{ steps.path_variables.outputs.release_path }}
      artifact_name: ${{ steps.path_variables.outputs.artifact_name }}
      release_path_msix: ${{ steps.path_variables.outputs.release_path_msix }}
      name_msix: ${{ steps.path_variables.outputs.name_msix }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup-gradle
        with:
          gradle-cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Read version from properties
        id: version
        shell: pwsh
        run: |
          $MAJOR = (Get-Content version.properties | Select-String "MAJOR=").ToString().Split("=")[1]
          $MINOR = (Get-Content version.properties | Select-String "MINOR=").ToString().Split("=")[1]
          $PATCH = (Get-Content version.properties | Select-String "PATCH=").ToString().Split("=")[1]
          $VERSION = "$MAJOR.$MINOR.$PATCH"
          "version=$VERSION" >> $env:GITHUB_OUTPUT
          "VERSION=$VERSION" >> $env:GITHUB_ENV

      - name: Update Licenses file
        run: ./gradlew desktopApp:exportLibraryDefinitions "-PaboutLibraries.exportPath=src/main/resources/"

      - name: Create path variables
        id: path_variables
        shell: pwsh
        run: |
          $name = "FeedFlow-${VERSION}.msi"
          $path = "desktopApp/build/release/main-release/msi/${name}"
          $name_msix = "FeedFlow-${VERSION}.msix"
          $path_msix = "desktopApp/build/release/main-release/msix/${name_msix}"
          "release_path=$path" >> $env:GITHUB_OUTPUT
          "artifact_name=$name" >> $env:GITHUB_OUTPUT
          "release_path_msix=$path_msix" >> $env:GITHUB_OUTPUT
          "name_msix=$name_msix" >> $env:GITHUB_OUTPUT
          "RELEASE_PATH=$path" >> $env:GITHUB_ENV
          "ARTIFACT_NAME=$name" >> $env:GITHUB_ENV
          "RELEASE_PATH_MSIX=$path_msix" >> $env:GITHUB_ENV
          "NAME_MSIX=$name_msix" >> $env:GITHUB_ENV
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Create Properties file
        shell: pwsh
        run: |
          "is_release=true" >> desktopApp/src/jvmMain/resources/props.properties
          "sentry_dns=$env:SENTRY_DNS" >> desktopApp/src/jvmMain/resources/props.properties
          "version=$env:VERSION" >> desktopApp/src/jvmMain/resources/props.properties
          "dropbox_key=$env:DROPBOX_API_KEY" >> desktopApp/src/jvmMain/resources/props.properties
        env:
          SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          VERSION: ${{ steps.version.outputs.version }}
          DROPBOX_API_KEY: ${{ secrets.DROPBOX_API_KEY }}

      - name: Create MSI
        run: ./gradlew packageReleaseMsi

      - name: Install MSIX Packaging Tool and Dependencies
        shell: pwsh
        run: |
          # Create directory for MSIX output
          New-Item -ItemType Directory -Force -Path "desktopApp/build/release/main-release/msix"
          
          # Download and install FOD (Feature on Demand) package for Windows 11
          Write-Host "Downloading MSIX Packaging Tool Driver FOD..."
          $fodUrl = "https://download.microsoft.com/download/6/c/7/6c7d654b-580b-40d4-8502-f8d435ca125a/Msix-PackagingTool-Driver-Package%7E31bf3856ad364e35%7Eamd64%7E%7E1.cab"
          $fodPath = "MSIXPackagingToolDriver.cab"
          Invoke-WebRequest -Uri $fodUrl -OutFile $fodPath
          
          Write-Host "Installing MSIX Packaging Tool Driver FOD..."
          $dismPath = "$env:SystemRoot\System32\dism.exe"
          & $dismPath /Online /Add-Package /PackagePath:$fodPath
          
          # Download MSIX Packaging Tool
          Write-Host "Downloading MSIX Packaging Tool..."
          $msixToolUrl = "https://download.microsoft.com/download/e/2/e/e2e923b2-7a3a-4730-969d-ab37001fbb5e/MSIXPackagingtoolv1.2024.405.0.msixbundle"
          $msixToolPath = "MSIXPackagingTool.msixbundle"
          Invoke-WebRequest -Uri $msixToolUrl -OutFile $msixToolPath
          
          Write-Host "Installing MSIX Packaging Tool..."
          & $dismPath /Online /Add-ProvisionedAppxPackage /PackagePath:$msixToolPath /SkipLicense
          
          Write-Host "Waiting for installation to complete..."
          Start-Sleep -Seconds 10

      - name: Prepare MSIX conversion template
        shell: pwsh
        run: |
          # Convert paths to absolute Windows paths
          $workspaceRoot = $pwd.Path
          Write-Host "`nConverting paths to absolute Windows paths:"
          Write-Host "Workspace root: $workspaceRoot"
          
          $absoluteMsiPath = Join-Path $workspaceRoot $env:RELEASE_PATH
          $absoluteMsixPath = Join-Path $workspaceRoot $env:RELEASE_PATH_MSIX
          
          # Ensure paths use Windows format
          $absoluteMsiPath = $absoluteMsiPath.Replace('/', '\')
          $absoluteMsixPath = $absoluteMsixPath.Replace('/', '\')
          
          Write-Host "Absolute MSI path: $absoluteMsiPath"
          Write-Host "Absolute MSIX path: $absoluteMsixPath"
          
          # Read and store content
          $templateContent = Get-Content -Path ".github/msix-conversion-template.xml" -Raw
          
          # Do replacements with absolute paths
          $templateContent = $templateContent.Replace("[MSIPath]", $absoluteMsiPath)
          $templateContent = $templateContent.Replace("[MSIXOutputPath]", $absoluteMsixPath)
          $templateContent = $templateContent.Replace("[AppVersion]", "${{ steps.version.outputs.version }}.0")
          $templateContent = $templateContent.Replace("[PublisherName]", "${{ secrets.MSIX_PUBLISHER_DISPLAY_NAME }}")
          
          Write-Host "`nWriting template to msix-conversion-config.xml"
          $templateContent | Set-Content -Path "msix-conversion-config.xml" -NoNewline

      - name: Convert MSI to MSIX
        shell: pwsh
        run: |
          Write-Host "`nStarting MSIX conversion..."
          MsixPackagingTool.exe create-package --template "msix-conversion-config.xml" -v

      - name: Update MSIX Manifest
        shell: pwsh
        run: |
          Write-Host "`nUpdating MSIX manifest..."
          # Create a temporary directory for extraction
          $tempDir = "temp_msix_extract"
          New-Item -ItemType Directory -Force -Path $tempDir
          
          # Extract the MSIX package using makeappx
          Write-Host "`nUnpacking MSIX package..."
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/makeappx.exe' unpack /p $env:RELEASE_PATH_MSIX /d $tempDir
          
          $manifestPath = Join-Path $tempDir "AppxManifest.xml"
          # Log original content for debugging
          Write-Host "`nOriginal manifest contents:"
          Get-Content $manifestPath 

          # Load manifest as XML for robust editing
          $xmlDoc = New-Object System.Xml.XmlDocument
          $xmlDoc.Load($manifestPath) # Use Load method for XmlDocument

          # Setup NamespaceManager for XPath queries
          $nsManager = New-Object System.Xml.XmlNamespaceManager($xmlDoc.NameTable)
          $nsManager.AddNamespace("pkg", "http://schemas.microsoft.com/appx/manifest/foundation/windows10")
          $nsManager.AddNamespace("uap", "http://schemas.microsoft.com/appx/manifest/uap/windows10")
          $nsManager.AddNamespace("desktop7", "http://schemas.microsoft.com/appx/manifest/desktop/windows10/7")
          $nsManager.AddNamespace("rescap", "http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities")

          # 1. Remove desktop7:Shortcut extension
          $applicationNode = $xmlDoc.SelectSingleNode("/pkg:Package/pkg:Applications/pkg:Application", $nsManager)
          if ($applicationNode) {
              $extensionsNode = $applicationNode.SelectSingleNode("pkg:Extensions", $nsManager)
              if ($extensionsNode) {
                  $shortcutExtensionNode = $extensionsNode.SelectSingleNode("desktop7:Extension[@Category='windows.shortcut']", $nsManager)
                  
                  if ($shortcutExtensionNode) {
                      Write-Host "Removing desktop7:Shortcut extension..."
                      $extensionsNode.RemoveChild($shortcutExtensionNode) | Out-Null
                  }

                  # If the <Extensions> node becomes empty, remove it too
                  if (-not $extensionsNode.HasChildNodes) {
                      $applicationNode.RemoveChild($extensionsNode) | Out-Null
                      Write-Host "Removed empty Extensions node."
                  }
              }
          }

          # 2. Update TargetDeviceFamily version numbers
          $targetDeviceFamilyNode = $xmlDoc.SelectSingleNode("/pkg:Package/pkg:Dependencies/pkg:TargetDeviceFamily[@Name='Windows.Desktop']", $nsManager)
          if ($targetDeviceFamilyNode) {
              Write-Host "Updating TargetDeviceFamily MinVersion to 10.0.17763.0 and MaxVersionTested to 10.0.22000.1..."
              $targetDeviceFamilyNode.SetAttribute("MinVersion", "10.0.17763.0")
              $targetDeviceFamilyNode.SetAttribute("MaxVersionTested", "10.0.22000.1")
          } else {
              Write-Warning "TargetDeviceFamily node with Name='Windows.Desktop' not found!"
          }

          # 3. Update Resources section - ensuring it's AFTER Dependencies
          $packageNode = $xmlDoc.SelectSingleNode("/pkg:Package", $nsManager)
          $dependenciesNode = $packageNode.SelectSingleNode("pkg:Dependencies", $nsManager)
          
          # Remove existing Resources node if it exists
          $currentResourcesNode = $packageNode.SelectSingleNode("pkg:Resources", $nsManager)
          if ($currentResourcesNode) {
              Write-Host "Removing existing Resources node..."
              $packageNode.RemoveChild($currentResourcesNode) | Out-Null
          }

          Write-Host "Adding new Resources node from .github/msix-resources-template.xml..."
          # Create new resources node directly in the document
          $resourcesNode = $xmlDoc.CreateElement("Resources", "http://schemas.microsoft.com/appx/manifest/foundation/windows10")
          
          # Load resources from template file
          [xml]$resourcesTemplate = Get-Content -Path ".github/msix-resources-template.xml"
          
          # Add each Resource element from template
          foreach ($resource in $resourcesTemplate.Resources.Resource) {
              $newResource = $xmlDoc.CreateElement("Resource", "http://schemas.microsoft.com/appx/manifest/foundation/windows10")
              $newResource.SetAttribute("Language", $resource.Language)
              $resourcesNode.AppendChild($newResource) | Out-Null
          }
          
          # Insert the new Resources node after Dependencies
          if ($dependenciesNode) {
              $packageNode.InsertAfter($resourcesNode, $dependenciesNode) | Out-Null
              Write-Host "Successfully inserted new Resources node after Dependencies."
          } else {
              $packageNode.AppendChild($resourcesNode) | Out-Null
              Write-Warning "Dependencies node not found. Appended Resources node to Package."
          }
          
          # Write the updated manifest back to file
          $xmlDoc.Save($manifestPath) 
          
          Write-Host "`nUpdated manifest contents:"
          Get-Content $manifestPath # Log updated content
          
          # Create a new MSIX package with the updated manifest using makeappx
          Write-Host "`nRepackaging MSIX with updated manifest..."
          $tempMsixPath = Join-Path $tempDir "temp.msix"
          
          # Ensure we're in the correct directory for repackaging
          Push-Location $tempDir
          try {
            & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/makeappx.exe' pack /d . /p "temp.msix"
          }
          finally {
            Pop-Location
          }
          
          # Delete the original MSIX and move the new one
          Write-Host "`nReplacing original MSIX with updated package..."
          if (Test-Path $env:RELEASE_PATH_MSIX) {
            Remove-Item -Path $env:RELEASE_PATH_MSIX -Force
          }
          Move-Item -Path $tempMsixPath -Destination $env:RELEASE_PATH_MSIX -Force
          
          # Clean up
          Remove-Item -Path $tempDir -Recurse -Force
          
          Write-Host "`nManifest updated successfully"

      - name: Upload reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            **/build/compose/logs/*  

      - name: Upload MSI asset
        if: ${{ inputs.create_github_release }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH }}
          name: ${{ env.ARTIFACT_NAME }}
          retention-days: 7

      - name: Upload MSIX asset
        if: ${{ inputs.create_github_release }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RELEASE_PATH_MSIX }}
          name: ${{ env.NAME_MSIX }}
          retention-days: 7 