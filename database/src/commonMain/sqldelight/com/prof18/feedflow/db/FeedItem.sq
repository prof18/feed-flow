import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE feed_item (
    url_hash TEXT NOT NULL PRIMARY KEY, -- New 'url_hash' as TEXT
    url TEXT NOT NULL,
    title TEXT,
    subtitle TEXT,
    content TEXT,
    image_url TEXT,
    feed_source_id TEXT NOT NULL,    -- Updated 'feed_source_id' to TEXT
    is_read INTEGER AS Boolean NOT NULL DEFAULT 0,
    is_bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
    pub_date INTEGER,
    comments_url TEXT
);

insertFeedItem:
INSERT OR IGNORE INTO feed_item(url_hash, url, title, subtitle, content, image_url, feed_source_id, pub_date, comments_url)
VALUES (?,?,?,?,?,?,?,?, ?);

countUnreadFeeds:
SELECT COUNT(*) FROM feed_item
INNER JOIN feed_source
ON feed_item.feed_source_id == feed_source.url_hash
LEFT JOIN feed_source_category
ON feed_source.category_id == feed_source_category.id
WHERE is_read = 0
AND (:feedSourceId IS NULL OR :feedSourceCategoryId IS NULL)
AND (:feedSourceId IS NULL OR feed_source_id = :feedSourceId)
AND (:feedSourceCategoryId IS NULL OR feed_source.category_id = :feedSourceCategoryId);

selectFeeds:
SELECT feed_item.url_hash, feed_item.url, feed_item.title, subtitle, image_url, pub_date, comments_url, is_read, is_bookmarked, feed_source.title AS feed_source_title, feed_source.url_hash AS feed_source_id, feed_source.url AS feed_source_url, feed_source.last_sync_timestamp AS feed_source_last_sync_timestamp, feed_source_category.id AS feed_source_category_id, feed_source_category.title AS feed_source_category_title, feed_source.logo_url AS feed_source_logo_url FROM feed_item
INNER JOIN feed_source
ON feed_item.feed_source_id == feed_source.url_hash
LEFT JOIN feed_source_category
ON feed_source.category_id == feed_source_category.id
WHERE (:isRead IS NULL OR is_read = :isRead)
AND (:isBookmarked IS NULL OR is_bookmarked = :isBookmarked)
AND (:feedSourceId IS NULL OR :feedSourceCategoryId IS NULL)
AND (:feedSourceId IS NULL OR feed_source_id = :feedSourceId)
AND (:feedSourceCategoryId IS NULL OR feed_source_category_id = :feedSourceCategoryId)
ORDER BY pub_date DESC
LIMIT :pageSize OFFSET :offset;

updateReadStatus:
UPDATE feed_item
SET is_read = :isRead
WHERE url_hash = :urlHash;

markAllRead:
UPDATE feed_item
SET is_read = 1
WHERE is_read = 0;

markAllReadByFeedSource:
UPDATE feed_item
SET is_read = 1
WHERE feed_source_id = :feedSourceId
AND is_read = 0;

markAllReadByCategory:
UPDATE feed_item
SET is_read = 1
WHERE feed_source_id IN (
  SELECT url_hash
  FROM feed_source
  WHERE category_id = :categoryId
)
AND is_read = 0;


clearOldItems:
DELETE FROM feed_item
WHERE pub_date < :threshold;

deleteAll:
DELETE FROM feed_item;

deleteAllWithFeedSource:
DELETE FROM feed_item
WHERE feed_source_id = :feedSourceId;

updateBookmarkStatus:
UPDATE feed_item
SET is_bookmarked = :starred
WHERE url_hash = :urlHash;
