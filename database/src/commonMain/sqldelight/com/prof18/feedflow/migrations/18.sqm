CREATE TABLE blocked_word (
    keyword TEXT NOT NULL PRIMARY KEY
);

-- Add is_blocked column to feed_item table
ALTER TABLE feed_item ADD COLUMN is_blocked INTEGER AS kotlin.Boolean NOT NULL DEFAULT 0;

CREATE TRIGGER IF NOT EXISTS update_blocked_on_keyword_insert
AFTER INSERT ON blocked_word
FOR EACH ROW
BEGIN
  UPDATE feed_item
  SET is_blocked = 1
  WHERE is_blocked = 0
  AND (
    (COALESCE(title, '') LIKE '%' || new.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
    (COALESCE(subtitle, '') LIKE '%' || new.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
    (COALESCE(content, '') LIKE '%' || new.keyword || '%' ESCAPE '\' COLLATE NOCASE)
  );
END;

CREATE TRIGGER IF NOT EXISTS update_blocked_on_keyword_delete
AFTER DELETE ON blocked_word
FOR EACH ROW
BEGIN
  UPDATE feed_item
  SET is_blocked = CASE
    WHEN EXISTS (
      SELECT 1 FROM blocked_word bk
      WHERE
        (COALESCE(feed_item.title, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
        (COALESCE(feed_item.subtitle, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
        (COALESCE(feed_item.content, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE)
    ) THEN 1
    ELSE 0
  END;
END;

CREATE TRIGGER IF NOT EXISTS update_blocked_on_feed_insert
AFTER INSERT ON feed_item
FOR EACH ROW
BEGIN
  UPDATE feed_item
  SET is_blocked = CASE
    WHEN EXISTS (
      SELECT 1 FROM blocked_word bk
      WHERE
        (COALESCE(new.title, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
        (COALESCE(new.subtitle, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE) OR
        (COALESCE(new.content, '') LIKE '%' || bk.keyword || '%' ESCAPE '\' COLLATE NOCASE)
    ) THEN 1
    ELSE 0
  END
  WHERE url_hash = new.url_hash;
END;

-- Recreate views to account for blocked keywords in unread counts
DROP VIEW IF EXISTS feed_source_unread_count;
DROP VIEW IF EXISTS category_with_unread;

CREATE VIEW feed_source_unread_count AS
SELECT
    feed_source.url_hash AS url_hash,
    feed_source.title AS feed_source_title,
    feed_source.url,
    feed_source.logo_url AS feed_source_logo_url,
    feed_source.website_url AS feed_source_website_url,
    feed_source.category_id,
    feed_source.last_sync_timestamp,
    feed_source.fetch_failed AS fetch_failed,
    feed_source_category.title AS category_title,
    feed_source_preferences.link_opening_preference,
    feed_source_preferences.is_hidden,
    feed_source_preferences.is_pinned,
    feed_source_preferences.notifications_enabled,
    (
        SELECT COUNT(*)
        FROM feed_item
        WHERE feed_item.feed_source_id == feed_source.url_hash
        AND feed_item.is_read == 0
        AND feed_item.is_blocked == 0
    ) AS unread_count
FROM feed_source
LEFT JOIN feed_source_category
ON feed_source.category_id = feed_source_category.id
LEFT JOIN feed_source_preferences
ON feed_source.url_hash = feed_source_preferences.feed_source_id;

CREATE VIEW category_with_unread AS
SELECT
    feed_source_category.id,
    feed_source_category.title,
    (
        SELECT COUNT(*)
        FROM feed_item
        INNER JOIN feed_source ON feed_item.feed_source_id == feed_source.url_hash
        WHERE feed_source.category_id == feed_source_category.id
        AND feed_item.is_read == 0
        AND feed_item.is_blocked == 0
    ) AS unread_count
FROM feed_source_category;
