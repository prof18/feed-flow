package com.prof18.feedflow.feedsync.feedbin.mapper

import com.prof18.feedflow.core.model.FeedItem
import com.prof18.feedflow.feedsync.feedbin.remote.model.FeedbinEntryDTO
import kotlinx.datetime.Instant

internal fun FeedbinEntryDTO.toDomainModel(
    feedSourceId: String, // ID of the parent feed source
    isRead: Boolean,
    isBookmarked: Boolean
): FeedItem {
    // Basic image URL extraction (example, might need refinement based on actual 'images' structure)
    // val imageUrl = (this.images as? kotlinx.serialization.json.JsonObject)?.get("c1000x600")?.jsonPrimitive?.contentOrNull

    return FeedItem(
        id = 0, // Local DB id, will be generated by SQLite on insert. This is not idOnServer.
        title = this.title ?: "",
        url = this.url,
        pubDate = Instant.parse(this.published), // Parse ISO 8601 string
        imageUrl = null, // Placeholder for actual image extraction logic
        content = this.content ?: this.summary ?: "",
        author = this.author,
        feedSourceId = feedSourceId,
        isRead = isRead,
        isBookmarked = isBookmarked,
        commentsUrl = null, // Feedbin DTO doesn't provide this
        dateMillis = Instant.parse(this.published).toEpochMilliseconds(), // For sorting/querying
        updateDateMillis = Instant.parse(this.createdAt).toEpochMilliseconds(), // Or published, depending on desired logic
        idOnServer = this.id.toString(), // Feedbin's entry ID
        sourceName = null, // This might be populated from the FeedSource later
        contentToSearch = "${this.title ?: ""} ${this.author ?: ""} ${this.content ?: this.summary ?: ""}"
    )
}
